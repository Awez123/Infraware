Metadata-Version: 2.4
Name: infraware
Version: 0.1.0
Summary: An IaC Security and Quality Scanner.
Author-email: Awez Ahmed Khan <awezkhan786jb@gmail.com>
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: typer[all]
Requires-Dist: pyyaml
Requires-Dist: rich
Dynamic: license-file

# InfraQube - IaC Security and Quality Scanner

InfraQube is a lightweight, rule-based command-line tool designed to scan Infrastructure as Code (IaC) files for security vulnerabilities, misconfigurations, and code quality issues. It currently supports scanning Terraform plan files in JSON format.

##  Features

* **Rule-Based Scanning**: Define vulnerabilities and best practices in simple YAML files.
* **Terraform Plan Scanning**: Scans the JSON output of `terraform plan` for the most accurate representation of your infrastructure.
* **Extensible**: Easily add new rules for various resources and providers.
* **Command-Line Interface**: Simple and easy to integrate into CI/CD pipelines.

##  Prerequisites

* [Python](https://www.python.org/downloads/) (version 3.8 or higher)
* [Terraform](https://developer.hashicorp.com/terraform/downloads) (version 1.0 or higher)

##  Setup and Installation

Follow these steps to set up your local development environment.

1.  **Clone the Repository**:
    ```bash
    git clone [https://github.com/your-username/infraqube.git](https://github.com/your-username/infraqube.git)
    cd infraqube
    ```

2.  **Create and Activate a Virtual Environment**:
    It's highly recommended to use a virtual environment to manage dependencies.
    ```bash
    # Create the virtual environment
    python -m venv venv

    # Activate it (Windows)
    .\venv\Scripts\activate

    # Activate it (Linux/macOS)
    source venv/bin/activate
    ```

3.  **Install Required Libraries**:
    The necessary Python libraries are listed in `requirements.txt`.
    ```bash
    pip install -r requirements.txt
    ```
    *(Note: You will need to create a `requirements.txt` file containing `typer`, `pyyaml`, and `python-hcl2`)*

##  How to Use

The scanner works by analyzing a JSON plan file generated by Terraform.

1.  **Navigate to Your Terraform Project**:
    `cd` into the directory containing your `.tf` files.

2.  **Initialize Terraform**:
    If you haven't already, initialize Terraform to download providers and modules.
    ```bash
    terraform init
    ```

3.  **Generate the JSON Plan**:
    Create a binary plan file and convert it to a readable JSON format.
    ```bash
    terraform plan -out=tfplan.binary
    terraform show -json tfplan.binary > tfplan.json
    ```

4.  **Run the Scanner**:
    Point the InfraQube scanner at the generated `tfplan.json` file and a rule file.
    ```bash
    python -m infraqube.main /path/to/your/tfplan.json /path/to/infraqube/rules/your_rule.yaml
    ```
    **Example**:
    ```bash
    python -m infraqube.main ../my-terraform-project/tfplan.json ./rules/aws_s3_public.yaml
    ```

##  Creating Rules

Rules are defined in simple YAML files inside the `rules/` directory. Each rule must contain the following fields:
* `id`: A unique identifier for the rule (e.g., `AWS-S3-001`).
* `severity`: The severity of the finding (e.g., `HIGH`, `MEDIUM`, `LOW`).
* `description`: A brief explanation of the vulnerability.
* `resource`: The Terraform resource type to check (e.g., `aws_s3_bucket`).
* `attribute`: The specific attribute within the resource to inspect (e.g., `acl`).
* `value`: The value of the attribute that indicates a vulnerability.

**Example Rule** (`rules/aws_s3_public.yaml`):
```yaml
- id: AWS-S3-001
  severity: HIGH
  description: "S3 bucket has a public ACL."
  resource: "aws_s3_bucket"
  attribute: "acl"
  value: "public-read"
```

##  Contributing

Contributions are welcome! Please feel free to open an issue or submit a pull request.

##  License

This project is licensed under the MIT License. See the `LICENSE` file for details.
